<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>RocketChat</Name>
    <Version>5.0.4</Version>
    <Vendor>Ligero [Free]</Vendor>
    <URL>http://ligero.online/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 2, June 1991</License>
    <ChangeLog Date="2017-11-23 09:50:00" Version="0.8">First Release</ChangeLog>
    <Description Lang="en">This addon enables OTRS to integrate with Rocket.Chat. You can have a livechat on your 
    OTRS or any site of your company.</Description>
    <Description Lang="pt_BR">Este AddOn realiza a integração do OTRS com o Rocket.Chat.</Description>
    <Framework>5.0.x</Framework>
    <CodeInstall Type="post">
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};
        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeInstall();
    </CodeInstall>
    <CodeUpgrade Type="post">
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};
        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgrade();
    </CodeUpgrade>
    <BuildDate>2019-10-09 13:48:44</BuildDate>
    <BuildHost>yourhost.example.com</BuildHost>
    <Filelist>
        <File Location="Custom/RocketChat.sopm" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX3BhY2thZ2UgdmVyc2lvbj0iMS4xIj4KICAgIDxOYW1lPlJvY2tldENoYXQ8L05hbWU+CiAgICA8VmVyc2lvbj41LjAuNDwvVmVyc2lvbj4KICAgIDxWZW5kb3I+TGlnZXJvIFtGcmVlXTwvVmVuZG9yPgogICAgPFVSTD5odHRwOi8vbGlnZXJvLm9ubGluZS88L1VSTD4KICAgIDxMaWNlbnNlPkdOVSBHRU5FUkFMIFBVQkxJQyBMSUNFTlNFIFZlcnNpb24gMiwgSnVuZSAxOTkxPC9MaWNlbnNlPgogICAgPENoYW5nZUxvZyBEYXRlPSIyMDE3LTExLTIzIDA5OjUwOjAwIiBWZXJzaW9uPSIwLjgiPkZpcnN0IFJlbGVhc2U8L0NoYW5nZUxvZz4KICAgIDxEZXNjcmlwdGlvbiBMYW5nPSJlbiI+VGhpcyBhZGRvbiBlbmFibGVzIE9UUlMgdG8gaW50ZWdyYXRlIHdpdGggUm9ja2V0LkNoYXQuIFlvdSBjYW4gaGF2ZSBhIGxpdmVjaGF0IG9uIHlvdXIgCiAgICBPVFJTIG9yIGFueSBzaXRlIG9mIHlvdXIgY29tcGFueS48L0Rlc2NyaXB0aW9uPgogICAgPERlc2NyaXB0aW9uIExhbmc9InB0X0JSIj5Fc3RlIEFkZE9uIHJlYWxpemEgYSBpbnRlZ3Jhw6fDo28gZG8gT1RSUyBjb20gbyBSb2NrZXQuQ2hhdC48L0Rlc2NyaXB0aW9uPgogICAgPEZyYW1ld29yaz41LjAueDwvRnJhbWV3b3JrPgogICAgPEZpbGVsaXN0PgogICAgICAgIDxGaWxlIExvY2F0aW9uPSJDdXN0b20vUm9ja2V0Q2hhdC5zb3BtIiBQZXJtaXNzaW9uPSI2NDQiPjwvRmlsZT4KICAgICAgICA8RmlsZSBMb2NhdGlvbj0iS2VybmVsL0NvbmZpZy9GaWxlcy9Sb2NrZXRDaGF0LnhtbCIgUGVybWlzc2lvbj0iNjQ0Ij48L0ZpbGU+CiAgICAgICAgPEZpbGUgTG9jYXRpb249Iktlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9Sb2NrZXRDaGF0L0luY29taW5nQ2hhdC5wbSIgUGVybWlzc2lvbj0iNjQ0Ij48L0ZpbGU+CiAgICAgICAgPEZpbGUgTG9jYXRpb249Iktlcm5lbC9PdXRwdXQvSFRNTC9GaWx0ZXJFbGVtZW50UG9zdC9Sb2NrZXRDaGF0LnBtIiBQZXJtaXNzaW9uPSI2NDQiPjwvRmlsZT4KICAgICAgICA8RmlsZSBMb2NhdGlvbj0iS2VybmVsL091dHB1dC9IVE1ML1RlbXBsYXRlcy9TdGFuZGFyZC9Sb2NrZXRDaGF0LnR0IiBQZXJtaXNzaW9uPSI2NDQiPjwvRmlsZT4KICAgICAgICA8RmlsZSBMb2NhdGlvbj0iS2VybmVsL091dHB1dC9IVE1ML1RlbXBsYXRlcy9TdGFuZGFyZC9Sb2NrZXRDaGF0L0NoYXRUZW1wbGF0ZS50dCIgUGVybWlzc2lvbj0iNjQ0Ij48L0ZpbGU+CiAgICAgICAgPEZpbGUgTG9jYXRpb249InZhci9wYWNrYWdlc2V0dXAvUm9ja2V0Q2hhdC5wbSIgUGVybWlzc2lvbj0iNjQ0Ij48L0ZpbGU+CiAgICAgICAgPEZpbGUgTG9jYXRpb249Iktlcm5lbC9TeXN0ZW0vVGlja2V0L0V2ZW50L05vdGlmaWNhdGlvbkV2ZW50L1RyYW5zcG9ydC9Sb2NrZXRDaGF0LnBtIiBQZXJtaXNzaW9uPSI2NDQiPjwvRmlsZT4KICAgICAgICA8RmlsZSBMb2NhdGlvbj0iS2VybmVsL091dHB1dC9IVE1ML1RlbXBsYXRlcy9TdGFuZGFyZC9BZG1pbk5vdGlmaWNhdGlvbkV2ZW50VHJhbnNwb3J0Um9ja2V0Q2hhdC50dCIgUGVybWlzc2lvbj0iNjQ0Ij48L0ZpbGU+CiAgICA8L0ZpbGVsaXN0PgogICAgPENvZGVJbnN0YWxsIFR5cGU9InBvc3QiPgogICAgICAgIG15ICRDb2RlTW9kdWxlID0gJ3Zhcjo6cGFja2FnZXNldHVwOjonIC4gJFBhcmFte1N0cnVjdHVyZX0tJmd0O3tOYW1lfS0mZ3Q7e0NvbnRlbnR9OwogICAgICAgICRLZXJuZWw6Ok9NLSZndDtHZXQoJENvZGVNb2R1bGUpLSZndDtDb2RlSW5zdGFsbCgpOwogICAgPC9Db2RlSW5zdGFsbD4KCTxDb2RlVXBncmFkZSBUeXBlPSJwb3N0Ij4KICAgICAgICBteSAkQ29kZU1vZHVsZSA9ICd2YXI6OnBhY2thZ2VzZXR1cDo6JyAuICRQYXJhbXtTdHJ1Y3R1cmV9LSZndDt7TmFtZX0tJmd0O3tDb250ZW50fTsKICAgICAgICAkS2VybmVsOjpPTS0mZ3Q7R2V0KCRDb2RlTW9kdWxlKS0mZ3Q7Q29kZVVwZ3JhZGUoKTsKICAgIDwvQ29kZVVwZ3JhZGU+Cjwvb3Ryc19wYWNrYWdlPgo=</File>
        <File Location="Kernel/Config/Files/RocketChat.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIxLjAiIGluaXQ9IkFwcGxpY2F0aW9uIj4KICAgIDxDb25maWdJdGVtIE5hbWU9IkZyb250ZW5kOjpPdXRwdXQ6OkZpbHRlckVsZW1lbnRQb3N0IyMjUm9ja2V0Q2hhdCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Sb2NrZXQgQ2hhdCBMaXZlY2hhdCBPdXRwdXQgRmlsdGVyPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+Um9ja2V0Q2hhdDwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkZyb250ZW5kOjpPdXRwdXQ6OkZpbHRlckVsZW1lbnRQb3N0PC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpPdXRwdXQ6OkhUTUw6OkZpbHRlckVsZW1lbnRQb3N0OjpSb2NrZXRDaGF0PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEZWJ1ZyI+MDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iVGVtcGxhdGVzIj4KICAgICAgICAgICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJDdXN0b21lckZvb3RlciI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgICAgICAgICA8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246Ok1vZHVsZSMjI1JvY2tldENoYXQ6OkluY29taW5nQ2hhdCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5HZW5lcmljSW50ZXJmYWNlIG1vZHVsZSByZWdpc3RyYXRpb24gZm9yIHRoZSBvcGVyYXRpb24gbGF5ZXIuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+Um9ja2V0Q2hhdDwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6TW9kdWxlUmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWUiPkluY29taW5nQ2hhdDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQ29udHJvbGxlciI+Um9ja2V0Q2hhdDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQ29uZmlnRGlhbG9nIj5BZG1pbkdlbmVyaWNJbnRlcmZhY2VPcGVyYXRpb25EZWZhdWx0PC9JdGVtPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iUm9ja2V0Q2hhdDo6Q29kZSIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5KYXZhc2NyaXB0IENvZGUgZ2VuZXJhdGVkIGJ5IHlvdXIgUm9ja2V0Q2hhdCBTZXJ2ZXI8L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5Sb2NrZXRDaGF0PC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+U2V0dGluZ3M8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8VGV4dEFyZWE+CiZsdDshLS0gU3RhcnQgb2YgUm9ja2V0LkNoYXQgTGl2ZWNoYXQgU2NyaXB0IC0tJmd0OwombHQ7c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCImZ3Q7CihmdW5jdGlvbih3LCBkLCBzLCB1KSB7Cgl3LlJvY2tldENoYXQgPSBmdW5jdGlvbihjKSB7IHcuUm9ja2V0Q2hhdC5fLnB1c2goYykgfTsgdy5Sb2NrZXRDaGF0Ll8gPSBbXTsgdy5Sb2NrZXRDaGF0LnVybCA9IHU7Cgl2YXIgaCA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sIGogPSBkLmNyZWF0ZUVsZW1lbnQocyk7CglqLmFzeW5jID0gdHJ1ZTsgai5zcmMgPSAnaHR0cHM6Ly95b3Vyc2VydmVyL3BhY2thZ2VzL3JvY2tldGNoYXRfbGl2ZWNoYXQvYXNzZXRzL3JvY2tldGNoYXQtbGl2ZWNoYXQubWluLmpzP189WFhYWFhYWFhYJzsKCWgucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaiwgaCk7Cn0pKHdpbmRvdywgZG9jdW1lbnQsICdzY3JpcHQnLCAnaHR0cHM6Ly95b3Vyc2VydmVyL2xpdmVjaGF0Jyk7CiZsdDsvc2NyaXB0Jmd0OwombHQ7IS0tIEVuZCBvZiBSb2NrZXQuQ2hhdCBMaXZlY2hhdCBTY3JpcHQgLS0mZ3Q7CiAgICAgICAgICAgIDwvVGV4dEFyZWE+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgoKICAgIDxDb25maWdJdGVtIE5hbWU9Ik5vdGlmaWNhdGlvbjo6VHJhbnNwb3J0IyMjUm9ja2V0Q2hhdCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EZWZpbmVzIGFsbCB0aGUgcGFyYW1ldGVycyBmb3IgdGhpcyBub3RpZmljYXRpb24gdHJhbnNwb3J0LjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPlJvY2tldENoYXQ8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Gcm9udGVuZDo6QWRtaW46OkFkbWluTm90aWZpY2F0aW9uRXZlbnQ8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTW9kdWxlIj5LZXJuZWw6OlN5c3RlbTo6VGlja2V0OjpFdmVudDo6Tm90aWZpY2F0aW9uRXZlbnQ6OlRyYW5zcG9ydDo6Um9ja2V0Q2hhdDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTmFtZSIgVHJhbnNsYXRhYmxlPSIxIj5Sb2NrZXQuQ2hhdDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iSWNvbiI+ZmEgZmEtcm9ja2V0PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJQcmlvIj4xMDM8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IklzT1RSU0J1c2luZXNzVHJhbnNwb3J0Ij4wPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJBZ2VudEVuYWJsZWRCeURlZmF1bHQiPjE8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+Cjwvb3Ryc19jb25maWc+Cg==</File>
        <File Location="Kernel/GenericInterface/Operation/RocketChat/IncomingChat.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/FilterElementPost/RocketChat.pm" Permission="644" Encode="Base64">cGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6RmlsdGVyRWxlbWVudFBvc3Q6OlJvY2tldENoYXQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgRGF0YTo6RHVtcGVyOwoKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnLAopOwoKPWhlYWQxIEFERE9OCgpSb2NrZXRDaGF0CgoKPWhlYWQxIE5BTUUKCktlcm5lbDo6T3V0cHV0OjpIVE1MOjpGaWx0ZXJFbGVtZW50UG9zdDo6Um9ja2V0Q2hhdAoKCj1oZWFkMSBTWU5PUFNJUwoKT3V0cHV0IGVsZW1lbnQgZmlsdGVyIHRoYXQgaW5jbHVkZXMgcm9ja2V0LmNoYXQgc2NyaXB0Cm9uIE9UUlMncyBDdXN0b21lciBpbnRlcmZhY2UKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKQ3JlYXRlcyB0aGUgb2JqZWN0LiBBbHNvIHRha2VzIHVzZXIgaW5mb3JtYXRpb24gYW5kIHNldHMgaW50byBTZWxmIGVsZW1lbnQKCj1jdXQKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKICAgIAogICAgJFNlbGYtPntVc2VyTG9naW59ID0gJFBhcmFte1VzZXJMb2dpbn07CiAgICAkU2VsZi0+e1VzZXJGaXJzdG5hbWV9ID0gJFBhcmFte1VzZXJGaXJzdG5hbWV9IHx8ICdHdWVzdCc7CiAgICAkU2VsZi0+e1VzZXJMYXN0bmFtZX0gPSAkUGFyYW17VXNlckxhc3RuYW1lfSB8fCAnJzsKICAgICRTZWxmLT57VXNlckVtYWlsfSA9ICRQYXJhbXtVc2VyRW1haWx9OwogICAgCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpFeGVjdXRlIG91dHB1dCBmaWx0ZXIgZWxlbWVudCBmb3IgaW5jbHVkaW4gUm9ja2V0LkNoYXQgbGl2ZWNoYXQgc2NyaXB0IG9uIApPVFJTJ3MgQ3VzdG9tZXIgSW50ZXJmYWNlCgo9Y3V0CnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgIG15ICVEYXRhID0gKAogICAgICAgIFVzZXJMb2dpbiAgICAgICAgICAgID0+ICRTZWxmLT57VXNlckxvZ2lufSwKICAgICAgICBVc2VyRmlyc3RuYW1lICAgICAgICA9PiAkU2VsZi0+e1VzZXJGaXJzdG5hbWV9LAogICAgICAgIFVzZXJMYXN0bmFtZSAgICAgICAgID0+ICRTZWxmLT57VXNlckxhc3RuYW1lfSwKICAgICAgICBVc2VyRW1haWwgICAgICAgICAgICA9PiAkU2VsZi0+e1VzZXJFbWFpbH0sCiAgICAgICAgUm9ja2V0Q2hhdEphdmFzY3JpcHQgPT4gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCdSb2NrZXRDaGF0OjpDb2RlJykKICAgICk7CgogICAgbXkgJENvbnRlbnQgPSAkTGF5b3V0T2JqZWN0LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdSb2NrZXRDaGF0JywKICAgICAgICBEYXRhICAgICAgICAgPT4gewogICAgICAgICAgICAlRGF0YQogICAgICAgIH0sCiAgICApOwogICAgIyMgQWRkIFJvY2tldCBDaGF0IHNjcmlwdAogICAgJHsgJFBhcmFte0RhdGF9IH0gLj0gJENvbnRlbnQ7CgogICAgcmV0dXJuIDE7Cn0KCjE7Cg==</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/RocketChat.tt" Permission="644" Encode="Base64">PCEtLSBTdGFydCBvZiBSb2NrZXQuQ2hhdCBMaXZlY2hhdCBTY3JpcHQgLS0+CgpbJSBEYXRhLlJvY2tldENoYXRKYXZhc2NyaXB0ICVdCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CnZhciBSb2NrZXRDaGF0UHJlRm9ybUNsZWFuID0gMDsKClJvY2tldENoYXQoZnVuY3Rpb24oKSB7CiAgICB0aGlzLm9uQ2hhdE1heGltaXplZChmdW5jdGlvbigpIHsKICAgICAgICAvLyBkbyB3aGF0ZXZlciB5b3Ugd2FudAogICAgICAgIGlmICghUm9ja2V0Q2hhdFByZUZvcm1DbGVhbil7CiAgICAgICAgICAgIC8vIEdldCBSb2NrZXRjaGF0IHByZSBmb3JtIGVsZW1lbnQKICAgICAgICAgICAgdmFyIGd1ZXN0TmFtZSA9ICQoJyNyb2NrZXRjaGF0LWlmcmFtZScpLmNvbnRlbnRzKCkuZmluZCgnI2d1ZXN0TmFtZScpOwogICAgICAgICAgICB2YXIgZ3Vlc3RFbWFpbCA9ICQoJyNyb2NrZXRjaGF0LWlmcmFtZScpLmNvbnRlbnRzKCkuZmluZCgnI2d1ZXN0RW1haWwnKTsKICAgICAgICAgICAgdmFyIGRlcGFydG1lbnQgPSAkKCcjcm9ja2V0Y2hhdC1pZnJhbWUnKS5jb250ZW50cygpLmZpbmQoJ3NlbGVjdFtuYW1lPWRlcGFydG1lbnRdJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTZXQgQ3VzdG9tZXIgTmFtZSBhbmQgRW1haWwKICAgICAgICAgICAgZ3Vlc3ROYW1lLnZhbCgnWyUgRGF0YS5Vc2VyRmlyc3RuYW1lICVdJyk7CiAgICAgICAgICAgIGd1ZXN0RW1haWwudmFsKCdbJSBEYXRhLlVzZXJFbWFpbCAlXScpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQ1NTCiAgICAgICAgICAgIGd1ZXN0TmFtZS5jc3MoJ2NvbG9yJywnIzc3NycpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsJyNlZWUnKS5wcm9wKCdyZWFkb25seScsJ3RydWUnKTsKICAgICAgICAgICAgZ3Vlc3RFbWFpbC5jc3MoJ2NvbG9yJywnIzc3NycpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsJyNlZWUnKS5wcm9wKCdyZWFkb25seScsJ3RydWUnKTsKICAgICAgICAgICAgJCgnI3JvY2tldGNoYXQtaWZyYW1lJykuY29udGVudHMoKS5maW5kKCdzZWxlY3RbbmFtZT1kZXBhcnRtZW50XSBvcHRpb246Y29udGFpbnMoIlNlbGVjdCBhIGRlcGFydG1lbnQiKScpLmdldCgwKS5yZW1vdmUoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIE1hcmsgYXMgY2xlYW5lZCBzbyB3ZSBkb24ndCBwZXJmb3JtIGl0IGFnYWluCiAgICAgICAgICAgIFJvY2tldENoYXRQcmVGb3JtQ2xlYW49MTsKICAgICAgICB9CiAgICB9KTsKICAgIHRoaXMuc2V0Q3VzdG9tRmllbGQoJ3VzZXJuYW1lJywgJ1slIERhdGEuVXNlckxvZ2luICVdJyk7CiAgICAvL0RpZmVyZW7Dp2EgICAgCiAgICB2YXIgZCA9IG5ldyBEYXRlKCk7CiAgICB2YXIgbiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTsKICAgIHRoaXMuc2V0Q3VzdG9tRmllbGQoJ3RpbWV6b25lJywgbik7Cn0pOwoKPC9zY3JpcHQ+Cg==</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/RocketChat/ChatTemplate.tt" Permission="644" Encode="Base64">PHN0eWxlPgoqIHsKICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8sIEFyaWFsLCBWZXJkYW5hLCBTYW5zIFNlcmlmLCBTYW5zU2VyaWYsIFNhbnMtU2VyaWY7CiAgICBjb2xvcjogIzMzMzsKICAgIGZvbnQtc2l6ZTogMTBwdDsKfQouUm9ja2V0Q2hhdERhdGUgewogICAgZm9udC1zaXplOiAxMHB0OwogICAgdGV4dC1hbGlnbjpjZW50ZXI7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHRvcDogLTE2cHg7CiAgICB3aWR0aDogMTIwcHg7CiAgICBtYXJnaW4tbGVmdDogYXV0bzsKICAgIG1hcmdpbi1yaWdodDogYXV0bzsKfQouUm9ja2V0Q2hhdExlZnQgewogICAgZmxvYXQ6IGxlZnQ7CiAgICBwYWRkaW5nOiA1cHg7CiAgICB3aWR0aDogNDVweDsKfQouUm9ja2V0Q2hhdEF1dGhvcnsKICAgIHBhZGRpbmctdG9wOiA2cHg7CiAgICBtYXJnaW4tYm90dG9tOiA0cHg7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGNvbG9yOiAjMzMzOwp9Ci5Sb2NrZXRDaGF0VGltZXsKICAgIGNvbG9yOiAjODg4OwogICAgZm9udC1zdHlsZTogaXRhbGljOwogICAgZm9udC1zaXplOiA5cHQ7Cn0KLlJvY2tldENoYXRSaWdodHsKICAgIG1pbi1oZWlnaHQ6NTBweDsKICAgIG1hcmdpbi1sZWZ0OjU2cHg7CiAgICBtYXJnaW4tYm90dG9tOiAxNXB4OwogICAgZGlzcGxheTpibG9jazsKfQouUm9ja2V0Q2hhdE1lc3NhZ2V7CiAgICBkaXNwbGF5OiBibG9jazsKfQo8L3N0eWxlPgo8ZGl2IGNsYXNzPSJSb2NrZXRDaGF0Q2hhdCI+CiMgWyUgUmVuZGVyQmxvY2tTdGFydCgiUm93IikgJV0KI1slIFJlbmRlckJsb2NrU3RhcnQoIkRhdGUiKSAlXQojICAgIDxoci8+CiMgICAgPGRpdiBjbGFzcz0iUm9ja2V0Q2hhdERhdGUiPlslIERhdGEuQ29udGVudCB8IExvY2FsaXplKCJEYXRlIikgJV08L2Rpdj4KI1slIFJlbmRlckJsb2NrRW5kKCJEYXRlIikgJV0KClslIFJlbmRlckJsb2NrU3RhcnQoIkF1dGhvciIpICVdCiAgICA8ZGl2IGNsYXNzPSJSb2NrZXRDaGF0TGVmdCI+CiAgICAgICAgICAgIFslIERhdGEuTGVmdCAlXQogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJSb2NrZXRDaGF0UmlnaHQiPgogICAgICAgIDxzcGFuIGNsYXNzPSJSb2NrZXRDaGF0QXV0aG9yIj4KICAgICAgICAgICAgPGI+WyUgRGF0YS5BdXRob3IgfCBodG1sICVdPC9iPiAKICAgICAgICAgICAgPHNwYW4gY2xhc3M9IlJvY2tldENoYXRUaW1lIj5bJSBEYXRhLlRpbWUgfCBMb2NhbGl6ZSgiVGltZVNob3J0IikgJV08L3NwYW4+CiAgICAgICAgPC9zcGFuPgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJNZXNzYWdlIikgJV0KICAgICAgICA8c3BhbiBjbGFzcz0iUm9ja2V0Q2hhdE1lc3NhZ2UiPgogICAgICAgICAgICBbJSBEYXRhLkNvbnRlbnQgJV0KICAgICAgICA8L3NwYW4+ClslIFJlbmRlckJsb2NrRW5kKCJNZXNzYWdlIikgJV0KICAgIDwvZGl2PgpbJSBSZW5kZXJCbG9ja0VuZCgiQXV0aG9yIikgJV0KIyBbJSBSZW5kZXJCbG9ja0VuZCgiUm93IikgJV0KPC9kaXY+Cg==</File>
        <File Location="var/packagesetup/RocketChat.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Ticket/Event/NotificationEvent/Transport/RocketChat.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AdminNotificationEventTransportRocketChat.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IENvbXBsZW1lbnRvLCBodHRwOi8vd3d3LmNvbXBsZW1lbnRvLm5ldC5icgojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPHAgY2xhc3M9IkZpZWxkRXhwbGFuYXRpb24iPlslIFRyYW5zbGF0ZSgiVGhpcyBtZXRob2Qgc2VuZHMgdGhlIG5vdGlmaWNhdGlvbiB0byB5b3VyIFJvY2tldC5DaGF0ISIpIHwgaHRtbCAlXTwvcD4KCjxsYWJlbCBmb3I9IlJlY2lwaWVudFdlYmhvb2tVUkwiPlslIFRyYW5zbGF0ZSgiUm9ja2V0LkNoYXQgV2ViaG9vayBVUkwiKSB8IGh0bWwgJV06IDwvbGFiZWw+CjxkaXYgY2xhc3M9IkZpZWxkIj4KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJSZWNpcGllbnRXZWJob29rVVJMIiBpZD0iUmVjaXBpZW50V2ViaG9va1VSTCIgY2xhc3M9Ilc1MHBjIiB2YWx1ZT0iWyUgRGF0YS5SZWNpcGllbnRXZWJob29rVVJMIHwgaHRtbCAlXSIvPgo8L2Rpdj4KPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2Pgo=</File>
    </Filelist>
</otrs_package>